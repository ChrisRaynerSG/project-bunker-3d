using System.Collections.Generic;
using UnityEngine;

/// <summary>
/// Holds configuration parameters and shared resources for procedural world generation steps.
/// 
/// WorldGenContext is passed to each step in the world generation pipeline, providing access to
/// world dimensions, noise settings, elevation limits, block access utilities, and shared data such as
/// the computed heightmap. This enables modular and coordinated generation of terrain, caves, ores, and other features.
/// </summary>
public class WorldGenContext
{
    /// <summary>
    /// The width of the world in blocks (X dimension).
    /// </summary>
    public int maxX;

    /// <summary>
    /// The maximum height of the world in blocks (Y dimension).
    /// </summary>
    public int maxY;

    /// <summary>
    /// The depth of the world in blocks (Z dimension).
    /// </summary>
    public int maxZ;

    /// <summary>
    /// The base frequency used for noise-based generation steps.
    /// </summary>
    public float frequency;

    /// <summary>
    /// The seed value for deterministic world generation.
    /// </summary>
    public int seed;

    /// <summary>
    /// The minimum elevation (Y value) for terrain generation.
    /// </summary>
    public int minElevation;

    /// <summary>
    /// The maximum elevation (Y value) for terrain generation.
    /// </summary>
    public int maxElevation;

    /// <summary>
    /// The maximum terrain height used for heightmap generation.
    /// </summary>
    public int maxTerrainHeight;

    /// <summary>
    /// The typical height of dirt layers below the surface.
    /// </summary>
    public int dirtHeight;

    /// <summary>
    /// Provides methods for accessing and modifying block data in the world.
    /// </summary>
    public BlockAccessor blockAccessor;

    /// <summary>
    /// Provides access to block definitions used during generation.
    /// </summary>
    public BlockDatabase blockDatabase;

    /// <summary>
    /// The heightmap generated by the heightmap step, reused by other steps.
    /// </summary>
    public int[,] heights;

    /// <summary>
    ///  Prefab for generating Y-slice objects
    ///  </summary>
    public GameObject ySlicePrefab;

    /// <summary>
    ///  Prefab for generating terrain chunks
    /// </summary>
    public GameObject chunkPrefab;

    /// <summary>
    ///  The world object that contains all generated data and objects.
    ///  </summary>
    public World world;

    /// <summary>
    ///  List of GameObjects representing Y-slice objects generated during world generation.
    /// </summary>
    public List<GameObject> ySlices = new List<GameObject>();
}